declare var hexcase: number;
declare var b64pad: string;
declare function hex_md5(s: any): string;
declare function b64_md5(s: any): string;
declare function any_md5(s: any, e: any): string;
declare function hex_hmac_md5(k: any, d: any): string;
declare function b64_hmac_md5(k: any, d: any): string;
declare function any_hmac_md5(k: any, d: any, e: any): string;
declare function md5_vm_test(): boolean;
declare function rstr_md5(s: any): string;
declare function rstr_hmac_md5(key: any, data: any): string;
declare function rstr2hex(input: any): string;
declare function rstr2b64(input: any): string;
declare function rstr2any(input: any, encoding: any): string;
declare function str2rstr_utf8(input: any): string;
declare function str2rstr_utf16le(input: any): string;
declare function str2rstr_utf16be(input: any): string;
declare function rstr2binl(input: any): any[];
declare function binl2rstr(input: any): string;
declare function binl_md5(x: any, len: any): number[];
declare function md5_cmn(q: any, a: any, b: any, x: any, s: any, t: any): number;
declare function md5_ff(a: any, b: any, c: any, d: any, x: any, s: any, t: any): number;
declare function md5_gg(a: any, b: any, c: any, d: any, x: any, s: any, t: any): number;
declare function md5_hh(a: any, b: any, c: any, d: any, x: any, s: any, t: any): number;
declare function md5_ii(a: any, b: any, c: any, d: any, x: any, s: any, t: any): number;
declare function safe_add(x: any, y: any): number;
declare function bit_rol(num: any, cnt: any): number;
